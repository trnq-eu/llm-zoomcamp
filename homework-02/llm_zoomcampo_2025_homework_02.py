# -*- coding: utf-8 -*-
"""llm-zoomcampo-2025-homework-02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rNuJBfEVKbpKZnyQ7H8Vm1gTCC6Gbevi

# LLM Zoomcamp 2025 - Homework 02

Getting started with Qdrant: https://colab.research.google.com/github/qdrant/examples/blob/master/qdrant_101_getting_started/getting_started.ipynb#scrollTo=WLDDZJP9hcdF

## Question 1
"""

!pip install fastembed

!pip install qdrant_client

!pip install qdrant-client[fastembed]

from fastembed import TextEmbedding
from qdrant_client import QdrantClient, models

client = QdrantClient(":memory:")


EMBEDDING_DIMENSIONALITY = 512
model_handle = TextEmbedding(model_name='jinaai/jina-embeddings-v2-small-en')
query = 'I just discovered the course. Can I join now?'

# embedding = models.Document(text=query, model=model_handle)
embedding = list(model_handle.embed(query))[0]

embedding

import numpy as np

# Convert to a NumPy array to check its properties
query_embedding_np = np.array(embedding)

# Print the shape to verify its size
print(f"Shape of the embedding: {query_embedding_np.shape}")

# You can also print a part of the embedding to see the values
print(f"First 10 values of the embedding: {query_embedding_np[:10]}")

min_value = np.min(query_embedding_np)
min_value

"""**Answer**: -0.11

## Question 2
"""

import numpy as np

# check vector normalization
np.linalg.norm(query_embedding_np)

doc = 'Can I still join the course after the start date?'
embedding2 = np.array(list(model_handle.embed(doc))[0])
embedding2[0:5]

from numpy.linalg import norm

def cosine_similarity(a, b):
  """Calculates the cosine similarity between two vectors.

    Args:
        a (np.ndarray): The first vector.
        b (np.ndarray): The second vector.

    Returns:
        float: The cosine similarity between the two vectors.
    """
  return np.dot(a, b) / (norm(a)*norm(b))

cosine_similarity(query_embedding_np, embedding2)

"""**Answer**: 0.900

## Question 3: Ranking by cosine
"""

documents = [{'text': "Yes, even if you don't register, you're still eligible to submit the homeworks.\nBe aware, however, that there will be deadlines for turning in the final projects. So don't leave everything for the last minute.",
  'section': 'General course-related questions',
  'question': 'Course - Can I still join the course after the start date?',
  'course': 'data-engineering-zoomcamp'},
 {'text': 'Yes, we will keep all the materials after the course finishes, so you can follow the course at your own pace after it finishes.\nYou can also continue looking at the homeworks and continue preparing for the next cohort. I guess you can also start working on your final capstone project.',
  'section': 'General course-related questions',
  'question': 'Course - Can I follow the course after it finishes?',
  'course': 'data-engineering-zoomcamp'},
 {'text': "The purpose of this document is to capture frequently asked technical questions\nThe exact day and hour of the course will be 15th Jan 2024 at 17h00. The course will start with the first  “Office Hours'' live.1\nSubscribe to course public Google Calendar (it works from Desktop only).\nRegister before the course starts using this link.\nJoin the course Telegram channel with announcements.\nDon’t forget to register in DataTalks.Club's Slack and join the channel.",
  'section': 'General course-related questions',
  'question': 'Course - When will the course start?',
  'course': 'data-engineering-zoomcamp'},
 {'text': 'You can start by installing and setting up all the dependencies and requirements:\nGoogle cloud account\nGoogle Cloud SDK\nPython 3 (installed with Anaconda)\nTerraform\nGit\nLook over the prerequisites and syllabus to see if you are comfortable with these subjects.',
  'section': 'General course-related questions',
  'question': 'Course - What can I do before the course starts?',
  'course': 'data-engineering-zoomcamp'},
 {'text': 'Star the repo! Share it with friends if you find it useful ❣️\nCreate a PR if you see you can improve the text or the structure of the repository.',
  'section': 'General course-related questions',
  'question': 'How can we contribute to the course?',
  'course': 'data-engineering-zoomcamp'}]

query = 'I just discovered the course. Can I join now?'
query_embedding = np.array(list(model_handle.embed(query))[0])
document_similarities = []


for doc in documents:
  document_embedding = np.array(list(model_handle.embed(doc['text']))[0])  # EMBED EACH DOCUMENT TEXT IN A LIST
  similarity = cosine_similarity(query_embedding, document_embedding)
  document_similarities.append(similarity)


document_similarities

document_similarity = zip(documents, document_similarities)
for doc, similarity in document_similarity:
    print(f"Document: {doc['text'][:50]}...")  # Print the first 50 characters
    print(f"Similarity: {similarity:.4f}")
    print("-" * 20)

"""**Risposta**: 1

## Q4. Ranking by cosine, version two
"""

for doc in documents:
  doc['full_text'] = doc['question'] + ' ' + doc['text']

documents[0]

full_text_similarities = []

for doc in documents:
  document_embedding = np.array(list(model_handle.embed(doc['full_text']))[0])
  similarity = cosine_similarity(query_embedding, document_embedding)
  full_text_similarities.append(similarity)

full_text_similarities

"""**Answer**: 0

## Q5. Selecting the embedding model

List of supported text embedders:
"""

import pandas as pd

from fastembed import (
    SparseTextEmbedding,
    TextEmbedding,
    LateInteractionTextEmbedding,
    ImageEmbedding,
)
from fastembed.rerank.cross_encoder import TextCrossEncoder

supported_models = (
    pd.DataFrame(TextEmbedding.list_supported_models())
    .sort_values("size_in_GB")
    .drop(columns=["sources", "model_file", "additional_files"])
    .reset_index(drop=True)
)
supported_models

"""**Answer**: 384

## Q6. Indexing with qdrant (2 points)
"""

import requests

docs_url = 'https://github.com/alexeygrigorev/llm-rag-workshop/raw/main/notebooks/documents.json'
docs_response = requests.get(docs_url)
documents_raw = docs_response.json()


documents = []

for course in documents_raw:
    course_name = course['course']
    if course_name != 'machine-learning-zoomcamp':
        continue

    for doc in course['documents']:
        doc['course'] = course_name
        documents.append(doc)

for doc in documents:
  doc['full_text'] = doc['question'] + ' ' + doc['text']

documents[0]

EMBEDDING_DIMENSIONALITY = 384
model_handle = "BAAI/bge-small-en-v1.5"

collection_name = "homework-docs"

client.create_collection(
    collection_name=collection_name,
    vectors_config=models.VectorParams(
        size=EMBEDDING_DIMENSIONALITY,
        distance=models.Distance.COSINE
    )
)



points = []

for i, doc in enumerate(documents):
    text = doc['question'] + ' ' + doc['text']
    vector = models.Document(text=text, model=model_handle)
    point = models.PointStruct(
        id=i,
        vector=vector,
        payload=doc
    )
    points.append(point)

client.upsert(
    collection_name=collection_name,
    points=points
)

def search(query, limit=5):
  results = client.query_points(
  collection_name=collection_name,
      query=models.Document(
          text=query,
          model=model_handle
      ),
      limit=limit, # top closest matches
      with_payload=True #to get metadata in the results
  )
  return results

result = search('I just discovered the course. Can I join now?')

result